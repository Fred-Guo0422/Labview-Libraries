[结构]
While = "True↑while\0D\0A"
For = "↑for\0D\0A"
如果 = "↑if\0D\0A"
否则如果 = "↑elif\0D\0A"
否则 = "↑else\0D\0A"
Try = "↑try\0D\0A"
Except = "↑except\0D\0A"
函数 = "function()↑def\0D\0A"
继续 = "continue↑out\0D\0A"
停止 = "break↑out\0D\0A"
系统延时 = "time.sleep(?数值?)#/1/10/100/1000↑out\0D\0A"
自定义 = "↑custom\0D\0A"
ss = "↑\0D\0A"

[变量]
变量赋值 = "i=↑out\0D\0A"
变量值 = "i↑in\0D\0A"

[运算]
比较运算 = "?运算符?#/==/!=/>/>=/</<=↑compare\0D\0A"
逻辑运算 = "?运算符?#/and/or/not↑logic\0D\0A"

[SuperPython]
SP集成 = "import pyb,time,_thread\0Aimport Motors,Ports,Rgb,Buzzer,Sonar,Global\0Afrom pyb import UART,Timer\0A\0Abluetooth = UART(3,115200,timeout=100)\0A\0Asw = pyb.Switch()\0A\0Am=Motors.Motor(0,0)\0A\0Alock=_thread.allocate_lock()\0A↑out\0D\0A"
SP测距接口 = "(Trig,Echo)=Ports.Sonar_port('?接口?')\0A_thread.start_new_thread(Sonar.Distance_thread, (Trig,Echo,))\0A#`J1`J2`J3`J4↑out\0D\0A"
SP巡线接口 = "(L,R)=Ports.Lwalk_port('?接口?')\0A#`J1`J2`J3`J4↑out\0D\0A"
SP左巡线 = "L.value()↑in\0D\0A"
SP右巡线 = "R.value()↑in\0D\0A"
SP超声波 = "Global.distance↑in\0D\0A"
SP蓝牙数据 = "bluetooth_data↑in\0D\0A"
SP蓝牙读取 = "bluetooth_data=bluetooth.read()↑out\0D\0A"
SP按键 = "sw()↑in\0D\0A"
SP加速度 = "pyb.Accel().x()↑in\0D\0A"
SPLED = "pyb.LED(?LED灯序号?).?状态?()#`1`2`3`4`i#`on`off↑out\0D\0A"
SP延时 = "pyb.delay(?时长?)#`1`10`100`1000↑out\0D\0A"
SP-RGB = "Rgb.RGB(?红?,?绿?,?蓝?)#`0`1#`0`1#`0`1↑out\0D\0A"
SP舵机 = "Global.angle?舵机?=?角度?#`1`2#`0`45`90`135`180↑out\0D\0A"
SP轮子 = "m.dc1=?左轮速度?\0Am.dc2=?右轮速度?\0Am.run()\0A#`-100`-80`-60`-40`-20`0`20`40`60`80`100#`-100`-80`-60`-40`-20`0`20`40`60`80`100\0A↑out\0D\0A"

[SuperAI]
AI模块 = "import time,serial\0Aimport cv2\0Aimport numpy as np↑out\0D\0A"
串口设置 = "ser=serial.Serial(?串口号?,?波特率?,timeout=0.5)\0A#`'/dev/ttyUSB0'#`9600`38400`115200\0A↑out\0D\0A"
串口读取 = "size = ser.inWaiting()\0Aif size != 0:\0A    ?读取至? = ser.read(size)\0A    ser.flushInput()\0A#`data_r↑out\0D\0A"
串口写入 = "data_str=?数据?\0Adata_byte=data_str.encode(encoding="utf-8")\0Aser.write(data_byte)\0A#`'a'`data_w\0A↑out\0D\0A"
打开图片 = "?图片?= cv2.imread(r?路径?,cv2.IMREAD_?模式?)\0A#`image`frame`pictrue#`'c:'#COLOR`GRAYSCALE`UNCHANGED↑out\0D\0A"
保存图片 = "cv2.imwrite(r?路径?,?图像?)\0A#`'c:'#`image`frame`pictrue↑out\0D\0A"
打开相机 = "camera = cv2.VideoCapture(?相机号?)\0A#`0`1`2↑out\0D\0A"
HSV颜色库 = "colors={'黑':[[0,0,0],[180,255,46]],'灰':[[0,0,46],[180,43,220]],'白':[[0,0,221],[180,30,255]],'红':[[0,43,46],[10,255,255]],'橙':[[11,43,46],[25,255,255]],'黄':[[26,43,46],[34,255,255]],'绿':[[35,43,46],[77,255,255]],'青':[[78,43,46],[99,255,255]],'蓝':[[100,43,46],[124,255,255]],'紫':[[125,43,46],[155,255,255]]}\0A↑out\0D\0A"
相机状态 = "camera.isOpened()↑in\0D\0A"
拍照 = "_,?图片名? = camera.read()\0A#`image`frame`pictrue↑out\0D\0A"
颜色转换 = "?新图名?=cv2.cvtColor(?原图名?, cv2.COLOR_?转换模式?)\0A#`image`frame`pictrue#`image`frame`pictrue#`BGR2RGB`BGR2GRAY`BGR2HSV`BGR2YCrCb`BGR2HLS`BGR2XYZ`BGR2LAB`BGR2YUV↑out\0D\0A"
颜色分割 = "color='?颜色?'\0Acolor_lower=np.array(colors[color][0])\0Acolor_upper=np.array(colors[color][1])\0A?二值图?=cv2.inRange(?原图?,color_lower,color_upper)\0A#`黑`灰`白`红`橙`黄`绿`青`蓝`紫#`mask`binary#`image`frame`pictrue↑out\0D\0A"
罗列轮廓 = "binary_image=?二值图?\0Atry:\0A    _,conts, hierarchy = cv2.findContours(binary_image, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)\0Aexcept:\0A    conts, hierarchy = cv2.findContours(binary_image, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)\0A?轮廓列表?=conts\0A#`binary`mask#`contours↑out\0D\0A"
轮廓信息 = "(x,y),r=cv2.minEnclosingCircle(?轮廓?)\0A?中心?=(int(x),int(y))\0A?半径?=int(y)\0A#`contour#`center#`radius↑out\0D\0A"
绘制圆形 = "cv2.circle(?原图?,?中心?,?半径?,(?颜色-蓝?, ?颜色-绿?, ?颜色-红?), ?线宽?)\0A#`image`frame`pictrue#`center#`radius#`0`255#`0`255#`0`255#`1`2`3↑out\0D\0A"
显示图像 = "cv2.imshow("?窗口名?",?图像?)\0A#`image`frame`pictrue#`image`frame`pictrue↑out\0D\0A"
关闭相机 = "k = cv2.waitKey(1)\0Aif k ==ord('q'):\0A    camera.release()\0A    cv2.destroyAllWindows()↑out\0D\0A"
图片尺寸 = "?高?, ?宽?= ?图片?.shape[:2]\0A#`h#`w#`image`frame`pictrue↑out\0D\0A"
模版匹配 = "mod=cv2.TM_?模式?\0Aresult= cv2.matchTemplate(?图像?, ?模板?, mod)\0Amin_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\0Aif mod=\0A#`SQDIFF`SQDIFF_NORMED`CCORR`CCORR_NORMED`CCOEFF`CCOEFF_NORMED#`image`frame`pictrue#`image`frame`pictrue↑out\0D\0A"

[test]